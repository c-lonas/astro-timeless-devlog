<div class="relative group">
    <div
        class="absolute top-6 aurora-border mx-auto -inset-1 rounded-xl blur-xl opacity-35 w-11/12 h-80 transition duration-300 z-5"
    >
    </div>
    <div 
        x-cloak
        x-data="initTerminal()" 
        x-init="init()" 
        @click="$event.target.querySelector('input')?.focus()" 
        class="bg-neutral-900 absolute block border-2 border-neutral-600 opacity-90 rounded-xl p-4 text-neutral-300 font-mono h-96 max-h-96 w-full overflow-y-auto scrollbar-thin scrollbar-thumb-neutral-800 scrollbar-track-neutral-900 z-40"
    >
        <template x-for="(item, index) in history" :key="index">
            <div>
                <p x-html="item"></p>
            </div>
        </template>
        <div class="flex items-center">
            <span x-html="promptPrefix"></span>
            <input 
                x-ref="input"
                x-model="input" 
                @keydown.enter="executeCommand()" 
                class="bg-neutral-900 text-neutral-300 focus:outline-none inline-block" 
            />
        </div>
    </div>
</div>
<script is:inline>
function initTerminal() {
    return {
        input: '',
        history: [],
        user: 'guest',
        promptPrefix: `
            <span class="text-emerald-600">‚úì</span> 
            <span class="text-cyan-600">guest</span><span class="text-neutral-500">@</span><span class="text-light-gold">tech.battery.nexus</span>‚ö°`,
        init() {
            if (this.history.length === 0) {
                this.history.push('üîã Welcome to <span class="nav-accent-link text-gradient-gold">BatteryShell</span> üêö<br>Type <span class="text-emerald-600">help</span> to see available commands.<br>');
            }

            this.$nextTick(() => {
                this.$refs.input.focus();
            });
        },
        executeCommand() {
            let output = '';
            const command = this.input.split(' ')[0];
            const argument1 = this.input.split(' ')[1] || '';
            const argument2 = this.input.split(' ')[2] || '';

            // Define command logic
            switch (command) {
                case '':
                    output = '';
                    break;
                case 'banger':
                    output = `<a href="https://bit.ly/3BlS71b" target="_blank" class="text-fuchsia-600">üìª Random Certified Banger</a>`
                    break;
                case 'cat':
                    if (argument1 === 'about') {
                        output = 'About page content...';
                    } else {
                        output = `Unrecognized argument: ${this.argument1}`;
                    }

                    break;
                case 'cd':
                    if (argument1 === 'posts') {
                        window.location.href = `/posts`;
                    } else if (argument1 === 'kanban') {
                        window.location.href = `/kanban`;
                    }
                    else {
                        output = 'cd requires an argument (try `cd posts`)';
                    }
                    break;
                case 'clear':
                    this.history = [];
                    break;
                case 'su':
                    if ( (argument1 === '-') && (argument2) ) {
                        const newUser = argument2;
                        this.user = newUser.trim() !== '' ? newUser : this.user;
                        this.promptPrefix = `<span class="text-emerald-600">‚úì</span> 
                                            <span class="text-cyan-600">${this.user}</span><span class="text-neutral-500">@</span><span class="text-light-gold">tech.battery.nexus</span>‚ö°`;
                        output = `Switched user to ${this.user}`;
                    }
                    break;
                case 'sudo':
                    output = 'sudo not implemented. But you might want to try acting as root...'
                    break;
                case 'gh':
                case 'github':
                    output = `<a href="https://github.com/c-lonas" target="_blank" class="text-fuchsia-600">üöÄ github.com/c-lonas</a>`
                    break;
                case 'help':
                case 'usage':
                    output = `Available commands: <br>
                                <span class="text-emerald-600">cat</span>: something something something <br>
                                <span class="text-emerald-600">cd</span>: change directory  <br>
                                <span class="text-emerald-600">clear</span>: brief description <br>
                                <span class="text-emerald-600">su -</span>: brief description <br>
                                <span class="text-emerald-600">github</span>: brief description <br>
                                <span class="text-emerald-600">help</span>: brief description <br>
                            `;
                    break;
                case 'kofi':
                case 'support':
                    output = `<a href="https://ko-fi.com/battery1" target="_blank" class="text-fuchsia-600">üíô ko-fi</a>`
                    break;
                default:
                    output = `Command not found: ${this.input}; use "help" for a list of available commands`;
                    this.promptPrefix = `<span class="text-rose-600">‚úó</span> 
                                        <span class="text-cyan-600">${this.user}</span><span class="text-neutral-500">@</span><span class="text-light-gold">tech.battery.nexus</span>‚ö°`;
                    break;
            }
            
            if(output) {
                this.history.push(`${this.promptPrefix} ${this.input}<br>${output}<br>`);
                this.promptPrefix = `<span class="text-emerald-600">‚úì</span> 
                                    <span class="text-cyan-600">${this.user}</span><span class="text-neutral-500">@</span><span class="text-light-gold">tech.battery.nexus</span>‚ö°`;
            } else {
                this.history.push(`${this.promptPrefix} ${this.input}`);
                this.promptPrefix = `<span class="text-emerald-600">‚úì</span> 
                                    <span class="text-cyan-600">${this.user}</span><span class="text-neutral-500">@</span><span class="text-light-gold">tech.battery.nexus</span>‚ö°`;
            }
            this.input = '';
        },
    };
}
</script>
